#!/usr/bin/env ruby

require_relative "../lib/tfmt"
require "trad-getopt"

class TFmt

  def help
    puts <<EOD
usage: tfmt [-hSv] FILE.txt

  -h  print this
  -S  generate separate CSS file (style.css)
  -v  print version

EOD
  end

  def puttoc toc
    @ofp.puts %|<div class="toc solid-border">|
    @ofp.puts %|Table of Contents<br/>|

    @ofp.puts %|<ul class="toc">|

    prevlv = toc.first[2]

    (prevlv - 1).times { @ofp.puts %|<ul class="tocsub">| }
    toc.each {|id, stitle, lv|
      if lv > prevlv
        (lv - prevlv).times { @ofp.puts %|<ul class="tocsub">| }
        prevlv = lv
      elsif lv < prevlv
        (prevlv - lv).times { @ofp.puts %|</ul>| }
        prevlv = lv
      end

      @ofp.puts %|<li><a class="gothic" href="##{id}">#{@fmt.hesc stitle}</a></li>|
    }
    (prevlv - 1).times { @ofp.puts %|</ul>| }

    @ofp.puts %|</ul></div><div style="float:none;"></div>|
  end

  def main

    separate_css = false
    while (op, oparg = getopt(ARGV, "hSv"))
      case op
      when "h", "help"
        help
        exit
      when "S"
        separate_css = true
      when "v", "version"
        puts VERSION
        exit
      else
        exit 1
      end
    end

    file = ARGV[0]
    abort "No input" unless file
    abort "No such file - #{file}" unless File.exist? file

    @ofp = File.open(File.basename(file, ".*") + ".html", "w")

    @fmt = TFmt.new
    title, html, toc, hdr = @fmt.format File.readlines file, chomp:true

    css = File.read "#{__dir__}/../lib/style.css"
    if separate_css
      cssinc = %|<link rel="stylesheet" type="text/css" href="style.css"/>|
      File.write "style.css", css
    else
      cssinc = %|<style type="text/css"/>\n#{css}</style>|
    end

    @ofp.puts <<EOD
<!-- generated by tfmt #{VERSION} -->
<html>
<head>
<meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/>
#{cssinc}
<title>#{@fmt.hesc title}</title>
</head>
<body>
<div id="main" class="round-border">
EOD

    @ofp.puts %|<h2 class="title">#{@fmt.hesc title}</h2>|

    unless toc.empty?
      puttoc toc

      @ofp.puts %|<hr class="invisible"/>|
    end

    @ofp.puts html

    @ofp.puts %|<br/><hr/>|
    @ofp.puts %|<div id="footer" class="dim small">|
    hdr.each {|var, val|
      @ofp.puts %|#{@fmt.hesc var}: #{@fmt.hesc val}<br/>|
    }
    @ofp.puts %|</div>|

    @ofp.puts %|</div></body></html>|
  end
end

TFmt.new.main
